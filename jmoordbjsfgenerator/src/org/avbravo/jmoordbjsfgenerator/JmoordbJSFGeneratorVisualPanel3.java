/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.avbravo.jmoordbjsfgenerator;

import java.io.File;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.avbravo.jmoordbjsfgenerator.generales.Directorios;
import org.avbravo.jmoordbjsfgenerator.generales.MySession;
import org.avbravo.jmoordbjsfgenerator.utilidades.Utilidades;

public final class JmoordbJSFGeneratorVisualPanel3 extends JPanel {

    DefaultTableModel modelo;

    /**
     * Creates new form JSFGeneratorVisualPanel3
     */
    public JmoordbJSFGeneratorVisualPanel3() {
        initComponents();
        modelo = (DefaultTableModel) jTableModulos.getModel();
        TableColumn column = jTableModulos.getColumnModel().getColumn(0);
        column.setPreferredWidth(200);
        column = jTableModulos.getColumnModel().getColumn(1);
        column.setPreferredWidth(60);

        column = jTableModulos.getColumnModel().getColumn(2);
        column.setPreferredWidth(60);

        column = jTableModulos.getColumnModel().getColumn(3);
        column.setPreferredWidth(60);
        cargarArchivosXhtml();
    }

    public DefaultTableModel getModelo() {
        return modelo;
    }

    public void setModelo(DefaultTableModel modelo) {
        this.modelo = modelo;
    }

    @Override
    public String getName() {
        return "Pages";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTableModulos = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jButtonCheckCreate = new javax.swing.JButton();
        jButtonUnCheckCreate = new javax.swing.JButton();
        jButtonCheckEdit = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jButtonUnCheckEdit = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jButtonCheckList = new javax.swing.JButton();
        jButtonUnCheckList = new javax.swing.JButton();

        jTableModulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Module", "Create", "Edit", "List"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableModulos);
        if (jTableModulos.getColumnModel().getColumnCount() > 0) {
            jTableModulos.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jTableModulos.columnModel.title0")); // NOI18N
            jTableModulos.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jTableModulos.columnModel.title1")); // NOI18N
            jTableModulos.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jTableModulos.columnModel.title2")); // NOI18N
            jTableModulos.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jTableModulos.columnModel.title3")); // NOI18N
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel22.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel22, org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jLabel22.text")); // NOI18N

        jButtonCheckCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/avbravo/jmoordbjsfgenerator/resources/check_box.png"))); // NOI18N
        jButtonCheckCreate.setToolTipText(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jButtonCheckCreate.toolTipText")); // NOI18N
        jButtonCheckCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckCreateActionPerformed(evt);
            }
        });

        jButtonUnCheckCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/avbravo/jmoordbjsfgenerator/resources/checkbox_no.png"))); // NOI18N
        jButtonUnCheckCreate.setToolTipText(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jButtonUnCheckCreate.toolTipText")); // NOI18N
        jButtonUnCheckCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnCheckCreateActionPerformed(evt);
            }
        });

        jButtonCheckEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/avbravo/jmoordbjsfgenerator/resources/check_box.png"))); // NOI18N
        jButtonCheckEdit.setToolTipText(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jButtonCheckEdit.toolTipText")); // NOI18N
        jButtonCheckEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckEditActionPerformed(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel25, org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jLabel25.text")); // NOI18N

        jButtonUnCheckEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/avbravo/jmoordbjsfgenerator/resources/checkbox_no.png"))); // NOI18N
        jButtonUnCheckEdit.setToolTipText(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jButtonUnCheckEdit.toolTipText")); // NOI18N
        jButtonUnCheckEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnCheckEditActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel24, org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jLabel24.text")); // NOI18N

        jButtonCheckList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/avbravo/jmoordbjsfgenerator/resources/check_box.png"))); // NOI18N
        jButtonCheckList.setToolTipText(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jButtonCheckList.toolTipText")); // NOI18N
        jButtonCheckList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckListActionPerformed(evt);
            }
        });

        jButtonUnCheckList.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/avbravo/jmoordbjsfgenerator/resources/checkbox_no.png"))); // NOI18N
        jButtonUnCheckList.setToolTipText(org.openide.util.NbBundle.getMessage(JmoordbJSFGeneratorVisualPanel3.class, "JmoordbJSFGeneratorVisualPanel3.jButtonUnCheckList.toolTipText")); // NOI18N
        jButtonUnCheckList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnCheckListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCheckCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonUnCheckCreate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel25)
                .addGap(37, 37, 37)
                .addComponent(jButtonUnCheckEdit)
                .addGap(18, 18, 18)
                .addComponent(jLabel24)
                .addGap(4, 4, 4)
                .addComponent(jButtonCheckList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonUnCheckList)
                .addContainerGap(38, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(202, 202, 202)
                    .addComponent(jButtonCheckEdit)
                    .addContainerGap(171, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonUnCheckList, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCheckList, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(jButtonUnCheckEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(jButtonCheckCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUnCheckCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jButtonCheckEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCheckCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckCreateActionPerformed
        try {

            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.setValueAt(Boolean.TRUE, i, 1);
            }
        } catch (Exception e) {
            DGlobal.error("Error " + e.getLocalizedMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCheckCreateActionPerformed

    private void jButtonUnCheckCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnCheckCreateActionPerformed
        try {

            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.setValueAt(Boolean.FALSE, i, 1);
            }
        } catch (Exception e) {
            DGlobal.error("Error " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButtonUnCheckCreateActionPerformed

    private void jButtonCheckEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckEditActionPerformed
        try {

            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.setValueAt(Boolean.TRUE, i, 2);
            }
        } catch (Exception e) {
            DGlobal.error("Error " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButtonCheckEditActionPerformed

    private void jButtonUnCheckEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnCheckEditActionPerformed
        try {

            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.setValueAt(Boolean.FALSE, i, 2);
            }
        } catch (Exception e) {
            DGlobal.error("Error " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButtonUnCheckEditActionPerformed

    private void jButtonCheckListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckListActionPerformed
        try {

            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.setValueAt(Boolean.TRUE, i, 3);
            }
        } catch (Exception e) {
            DGlobal.error("Error " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButtonCheckListActionPerformed

    private void jButtonUnCheckListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnCheckListActionPerformed
        try {

            for (int i = 0; i < modelo.getRowCount(); i++) {
                modelo.setValueAt(Boolean.FALSE, i, 3);
            }
        } catch (Exception e) {
            DGlobal.error("Error " + e.getLocalizedMessage());
        }
    }//GEN-LAST:event_jButtonUnCheckListActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCheckCreate;
    private javax.swing.JButton jButtonCheckEdit;
    private javax.swing.JButton jButtonCheckList;
    private javax.swing.JButton jButtonUnCheckCreate;
    private javax.swing.JButton jButtonUnCheckEdit;
    private javax.swing.JButton jButtonUnCheckList;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableModulos;
    // End of variables declaration//GEN-END:variables

    private Boolean cargarArchivosXhtml() {
        try {

            //String dir = MySession.getWeb() + MySession.getFileSeparator() + "page" + MySession.getFileSeparator() + "Menu";

            modelo = Utilidades.limpiarModelo(modelo);
            // File dir = new File("c:\\winnt");
            File dir1 = new File(Directorios.getDirectorioBeans());
            String[] ficheros = dir1.list();
            if (ficheros == null) {
                // System.out.println("No hay ficheros en el directorio especificado");
            } else {


                Boolean insertfound = Boolean.TRUE;
                Boolean listfound = Boolean.TRUE;
                Boolean queryfound = Boolean.TRUE;
                for (String archivo : ficheros) {
                    insertfound = Boolean.TRUE;
                    listfound = Boolean.TRUE;
                    queryfound = Boolean.TRUE;
                    String fi = archivo.replaceAll(".java", "").trim();
//bus
                    String directorioModulo = MySession.getWeb() + MySession.getFileSeparator() + "page" + MySession.getFileSeparator() + fi.toLowerCase();
                    File dirmodulo = new File(directorioModulo);
                    String[] ficherosmodulo = dirmodulo.list();
                    if (ficherosmodulo == null) {

                        Object[] filas = new Object[4];
                        filas[0] = fi;
                        filas[1] = insertfound;
                        filas[2] = queryfound;
                        filas[3] = listfound;
                        modelo.addRow(filas);
                    } else {

                        for (String paginas : ficherosmodulo) {
                            if (paginas.indexOf("insert.xhtml") != -1) {
                                insertfound = Boolean.FALSE;
                            } else {
                                if (paginas.indexOf("list.xhtml") != -1) {
                                    listfound = Boolean.FALSE;
                                } else {
                                    if (paginas.indexOf("query.xhtml") != -1) {
                                        queryfound = Boolean.FALSE;
                                    }
                                }
                            }
                        }
                        Object[] filas = new Object[4];
                        filas[0] = fi;
                        filas[1] = insertfound;
                        filas[2] = queryfound;
                        filas[3] = listfound;
                        modelo.addRow(filas);
                    }
                }
                return true;
            }
        } catch (Exception e) {
            DGlobal.error("cargarArchivosXhmtl()" + e.getLocalizedMessage());
        }
        return false;

    }
}
